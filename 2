type BinaryTree =
    | Node of int * BinaryTree * BinaryTree
    | Empty

let getPositiveLeaves tree =
    let rec traverse acc = function
        | Empty -> acc
        | Node(value, Empty, Empty) when value > 0 -> value :: acc
        | Node(_, left, right) ->
            let accLeft = traverse acc left
            traverse accLeft right
    
    traverse [] tree |> List.rev

let binTree = 
    Node(2, 
        Node(1, Empty, Empty), 
        Node(4, 
            Node(3, Empty, Empty), 
            Node(-5, Empty, Empty)))

let rec printInOrder tree =
    match tree with
    | Node(data, left, right) ->
        printInOrder left
        printfn "Node %d" data
        printInOrder right
    | Empty -> ()

[<EntryPoint>]
let main argv =
    printfn "Исходное дерево:"
    printInOrder binTree

    let positiveLeaves = getPositiveLeaves binTree
    printfn "\nПоложительные листья дерева: %A" positiveLeaves

    0
